% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vartest.R
\name{glmmtestPQL}
\alias{glmmtestPQL}
\title{A simple test for random effects in regression models, GLMM case.}
\usage{
glmmtestPQL(glmmfit, Ztlist.start, Ztlist.end, simulations = 10^6)
}
\arguments{
\item{glmmfit}{A fitted glmer() object}

\item{Ztlist.start}{The first index (inclusive) in Ztlist corresponding to the random effect to be tested.}

\item{Ztlist.end}{The last index (inclusive) in Ztlist corresponding to the random effect to be tested. For example, giving Ztlist.start=1 and Ztlist.end=2 tells lmmtest that the random effect to be tested consists of elements 1 and 2 in Ztlist. Ztlist is given by getME(lmmfit, "Ztlist"), see examples.}

\item{simulations}{The number of simulations used to obtain the distribution function of the test statistic. Default is 10^6.}
}
\value{
The p-value of the test. Numeric, can be exactly 0. As simulations determine the test statistic distribution repeatedly every time, results may vary slightly with each execution.
}
\description{
An implementation of the test proposed by Simon Wood in the Biometrika paper "A simple test for random effects in regression models". Link: https://doi.org/10.1093/biomet/ast038
}
\examples{
#'  # For GLMMs, the test works the same as for LMMs.
set.seed(123)

#Create hierarchical dataframe
create_hierarchical_df<-function(levels1,levels2,obs_per_level){
  
  g1<-as.factor(1:levels1)
  g2<-as.factor(1:levels2)
  n_obs=obs_per_level #ie 20 students per class
  g1<-rep(g1,each=length(g2)*n_obs)
  g2<-rep(rep(g2,each=n_obs),times=levels1)
  g1<-as.factor(g1)
  g2<-as.factor(g2)
  g1.g2<-g1:g2
  test.df<-data.frame(g1=g1,g2=g2,g1.g2=g1.g2)
  return(test.df)
  }

test.df<-create_hierarchical_df(10,10,20) #function simulates a data with 10 levels of factor g1, and another 10 levels of factor g2, g2 nested within g1.

#Simulate the corresponding hierarchical Poisson GLMM data, with weak level 2 effect.
intercept<-2
predictor<-simLMM(~(1|g1)+(1|g1.g2),Fixef = c(intercept),VC_sd=list(c(5),c(0.1),c(0)),data=test.df)
y<-rpois(n=length(predictor),lambda=exp(predictor))
GLMM_model<-glmer(y~1+(1|g1)+(1|g1.g2),verbose=0,family = "poisson",data=test.df)
summary(GLMM_model)


getME(GLMM_model,"Ztlist")
#the first element of Ztlist contains the level 2 random intercept associated with the interaction factor.
#This is what we want to test.

glmmtestPQL(GLMM_model,1,1) #returns p value, or NaN if its a singular fit.
}
